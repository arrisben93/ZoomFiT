# Plan d'Actions - FitTracker
**Projet interne réalisable - Période : 1er octobre - 5 décembre 2025**

---

## Vue d'Ensemble

Ce plan d'actions est conçu spécifiquement pour vos compétences techniques actuelles et la contrainte de temps de 9 semaines. Il utilise exclusivement les technologies que vous maîtrisez déjà selon votre CV.

**Technologies utilisées (de votre parcours) :**
- **Frontend :** React, JavaScript, HTML5, CSS3, Bootstrap
- **Backend :** Node.js, Express.js
- **Base de données :** MongoDB
- **Outils :** Git, GitHub, VS Code, Postman

---

## 1. Organisation Hebdomadaire

### Structure des semaines :
- **Lundi-Mercredi :** Développement intensif
- **Jeudi :** Tests et corrections
- **Vendredi :** Intégration et préparation semaine suivante
- **Weekend :** Rapport hebdomadaire (dimanche soir)

### Outils de suivi :
- **GitHub Projects :** Kanban simple pour les tâches
- **VS Code :** Environnement de développement
- **Postman :** Tests des APIs
- **Document partagé :** Suivi des progrès pour l'enseignant

---

## 2. Phase 1 - Setup et Fondations (Semaines 1-2)

### **Semaine 1 : Conception et Initialisation (1-6 octobre)**

**Objectif :** Projet initialisé et prêt pour le développement

**Lundi (1 oct) :**
- Finaliser le cahier des charges
- Créer la structure des dossiers projet
- Initialiser les repos Git (frontend/backend séparés)
- **Livrables :** Repos GitHub + structure projet

**Mardi (2 oct) :**
- Créer les wireframes simples (papier/digital)
- Définir la palette de couleurs et le style
- Setup de l'environnement de développement local
- **Livrables :** Maquettes + environnement prêt

**Mercredi (3 oct) :**
- Installer et configurer MongoDB local
- Créer le projet Node.js avec Express
- Setup du projet React
- **Livrables :** Projets initialisés + "Hello World"

**Jeudi (4 oct) :**
- Configuration de base (CORS, body-parser, etc.)
- Test de connexion MongoDB
- Premier commit et push sur GitHub
- **Livrables :** Configuration de base testée

**Vendredi (5 oct) :**
- Documentation du setup dans README
- Planification détaillée semaine 2
- **Premier rapport hebdomadaire :** Préparation et envoi dimanche soir

### **Semaine 2 : Backend Foundation (7-13 octobre)**

**Objectif :** Backend fonctionnel avec authentification

**Lundi (7 oct) :**
- Modélisation détaillée de la base de données
- Création des schémas Mongoose (User, Workout, Food, Meal)
- Installation des dépendances (bcrypt, jsonwebtoken, etc.)
- **Livrables :** Modèles de données créés

**Mardi (8 oct) :**
- Implémentation du système d'authentification
- Routes POST /register et POST /login
- Middleware de protection JWT
- **Livrables :** Authentification backend fonctionnelle

**Mercredi (9 oct) :**
- Tests des endpoints avec Postman
- Création des premières routes utilisateur
- Gestion des erreurs de base
- **Livrables :** APIs d'auth testées et fonctionnelles

**Jeudi (10 oct) :**
- Debugging et optimisations
- Documentation des APIs dans Postman
- Tests de sécurité de base
- **Livrables :** Backend sécurisé et testé

**Vendredi (11 oct) :**
- Peuplement de la base avec données de test
- Validation complète du backend
- **Deuxième rapport hebdomadaire :** Préparation

---

## 3. Phase 2 - Développement Core (Semaines 3-5)

### **Semaine 3 : APIs Principales (14-20 octobre)**

**Objectif :** Toutes les APIs nécessaires fonctionnelles

**Lundi (14 oct) :**
- Routes CRUD pour les entraînements
- Endpoints : GET, POST, PUT, DELETE /workouts
- **Livrables :** APIs entraînements complètes

**Mardi (15 oct) :**
- Routes pour la nutrition
- Base de données d'aliments (import initial)
- Endpoints : GET, POST /foods et /meals
- **Livrables :** APIs nutrition fonctionnelles

**Mercredi (16 oct) :**
- APIs pour les statistiques utilisateur
- Calculs des totaux nutritionnels
- Endpoints pour les graphiques
- **Livrables :** APIs stats et calculs

**Jeudi (17 oct) :**
- Tests complets avec Postman
- Documentation des endpoints
- Corrections et optimisations
- **Livrables :** Backend API complet

**Vendredi (18 oct) :**
- Validation globale du backend
- Préparation pour l'intégration frontend
- **Troisième rapport hebdomadaire**

### **Semaine 4 : Frontend Foundation (21-27 octobre)**

**Objectif :** Structure React et authentification frontend

**Lundi (21 oct) :**
- Setup React avec routing (React Router)
- Configuration de base (Bootstrap, CSS)
- Création des composants de base (Header, Footer, Sidebar)
- **Livrables :** Structure React opérationnelle

**Mardi (22 oct) :**
- Pages d'authentification (Login, Register)
- Intégration avec les APIs backend
- Gestion des tokens JWT côté client
- **Livrables :** Authentification frontend fonctionnelle

**Mercredi (23 oct) :**
- Protection des routes privées
- Context API pour la gestion de l'état utilisateur
- Navigation conditionnelle (connecté/non connecté)
- **Livrables :** Système d'auth complet frontend

**Jeudi (24 oct) :**
- Tests de l'authentification complète
- Amélioration de l'UX/UI des pages d'auth
- Gestion des erreurs utilisateur
- **Livrables :** Auth frontend polie et testée

**Vendredi (25 oct) :**
- Dashboard de base (structure)
- Préparation des composants principaux
- **Quatrième rapport hebdomadaire**

### **Semaine 5 : Interfaces Principales (28 oct - 3 nov)**

**Objectif :** Interfaces principales fonctionnelles

**Lundi (28 oct) :**
- Page profil utilisateur
- Formulaires d'informations personnelles
- Intégration avec l'API utilisateur
- **Livrables :** Gestion profil complète

**Mardi (29 oct) :**
- Interface d'ajout d'entraînement
- Formulaire dynamique pour exercices/séries
- Liste des entraînements précédents
- **Livrables :** Module entraînement fonctionnel

**Mercredi (30 oct) :**
- Interface journal alimentaire
- Recherche d'aliments
- Ajout de repas avec quantités
- **Livrables :** Module nutrition fonctionnel

**Jeudi (31 oct) :**
- Tests d'intégration frontend/backend
- Corrections des bugs identifiés
- Amélioration de l'expérience utilisateur
- **Livrables :** Interfaces principales testées

**Vendredi (1 nov) :**
- Polish des interfaces
- Responsive design avec Bootstrap
- **Cinquième rapport hebdomadaire**

---

## 4. Phase 3 - Finalisation et Polish (Semaines 6-8)

### **Semaine 6 : Dashboard et Visualisations (4-10 novembre)**

**Objectif :** Tableau de bord avec graphiques

**Lundi (4 nov) :**
- Installation et configuration de Chart.js
- Graphique de progression du poids
- **Livrables :** Premier graphique fonctionnel

**Mardi (5 nov) :**
- Graphique du volume d'entraînement
- Statistiques nutritionnelles
- **Livrables :** Graphiques principaux

**Mercredi (6 nov) :**
- Dashboard complet avec widgets
- Résumés et totaux
- **Livrables :** Dashboard fonctionnel

**Jeudi (7 nov) :**
- Tests et optimisations des graphiques
- Responsive design des visualisations
- **Livrables :** Visualisations polies

**Vendredi (8 nov) :**
- Intégration complète dashboard
- **Sixième rapport hebdomadaire**

### **Semaine 7 : Optimisations et Features (11-17 novembre)**

**Objectif :** Application complète et optimisée

**Lundi (11 nov) :**
- Optimisations de performance
- Lazy loading si nécessaire
- **Livrables :** App optimisée

**Mardi (12 nov) :**
- Fonctionnalités additionnelles (recherche, filtres)
- Amélioration de l'UX
- **Livrables :** Features additionnelles

**Mercredi (13 nov) :**
- Gestion d'erreurs améliorée
- Messages utilisateur informatifs
- **Livrables :** UX améliorée

**Jeudi (14 nov) :**
- Tests complets de l'application
- Correction des bugs
- **Livrables :** App stable

**Vendredi (15 nov) :**
- Validation complète
- **Septième rapport hebdomadaire**

### **Semaine 8 : Tests et Stabilisation (18-24 novembre)**

**Objectif :** Application stable et prête

**Lundi (18 nov) :**
- Tests exhaustifs de tous les modules
- Tests de régression
- **Livrables :** App entièrement testée

**Mardi (19 nov) :**
- Optimisations finales
- Performance et sécurité
- **Livrables :** App optimisée

**Mercredi (20 nov) :**
- Préparation des données de démonstration
- Scenarios de test utilisateur
- **Livrables :** Données de démo

**Jeudi (21 nov) :**
- Documentation technique
- Comments dans le code
- **Livrables :** Code documenté

**Vendredi (22 nov) :**
- Finalisation version stable
- **Huitième rapport hebdomadaire**

---

## 5. Phase 4 - Documentation et Présentation (Semaine 9)

### **Semaine 9 : Finalisation et Documentation (25 nov - 1 déc)**

**Objectif :** Projet complet et documenté

**Lundi (25 nov) :**
- Rédaction du rapport final
- Documentation technique complète
- **Livrables :** Brouillon rapport

**Mardi (26 nov) :**
- README détaillé avec instructions d'installation
- Guide utilisateur
- **Livrables :** Documentation utilisateur

**Mercredi (27 nov) :**
- Préparation de la présentation
- Screenshots et démo
- **Livrables :** Matériel de présentation

**Jeudi (28 nov) :**
- Finalisation du rapport
- Relecture et corrections
- **Livrables :** Rapport finalisé

**Vendredi (29 nov) :**
- Préparation finale
- Tests de dernière minute
- **Dernier rapport hebdomadaire**

**Weekend (30 nov - 1 déc) :**
- Répétition de la présentation
- Anticipation des questions

---

## 6. Livrables par Semaine

### Rapports hebdomadaires (chaque dimanche) :
1. **6 oct :** Setup projet + wireframes
2. **13 oct :** Backend authentification fonctionnel
3. **20 oct :** APIs complètes et testées
4. **27 oct :** Frontend auth + structure
5. **3 nov :** Interfaces principales fonctionnelles
6. **10 nov :** Dashboard avec graphiques
7. **17 nov :** App complète avec features
8. **24 nov :** App stable et testée
9. **1 déc :** Documentation complète

### Livrables finaux :
- **8 décembre :** Remise rapport final + code source
- **16 décembre :** Soutenance avec démo live

---

## 7. Gestion des Risques - Actions Concrètes

### Risque : Retard sur le développement
**Prévention :** 
- Planning avec buffer de 2-3 jours par semaine
- Priorisation des fonctionnalités core
- **Action si réalisé :** Réduire les features avancées, se concentrer sur MVP

### Risque : Problèmes techniques bloquants
**Prévention :**
- Utiliser uniquement des technologies maîtrisées
- Tests fréquents et itératifs
- **Action si réalisé :** Recherche sur Stack Overflow, aide des enseignants

### Risque : Bugs critiques en fin de projet
**Prévention :**
- Tests après chaque module
- Code reviews personnelles régulières
- **Action si réalisé :** Prioriser les corrections critiques

---

## 8. Suivi Quotidien

### Routine quotidienne :
**Matin (9h-12h) :** Développement focus sans distraction
**Après-midi (13h-17h) :** Intégration et tests
**Soir :** Documentation et commit GitHub

### Métriques de suivi :
- **Commits quotidiens :** Minimum 1 commit par jour
- **Fonctionnalités :** 1-2 features par semaine minimum
- **Tests :** Chaque endpoint testé avant passage au suivant
- **Documentation :** À jour chaque fin de semaine

### Communication avec l'enseignant :
- **Rapports hebdomadaires :** Dimanche soir systématiquement
- **Questions urgentes :** Email ou communication directe
- **Demande d'aide :** Ne pas attendre plus de 2 jours bloqué

---

## 9. Structure de Fichiers Recommandée

```
fittracker/
├── backend/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── config/
│   └── server.js
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── context/
│   │   └── utils/
│   └── public/
├── docs/
├── README.md
└── package.json
```

---

## 10. Check-list de Validation Finale

### Fonctionnalités obligatoires :
- [ ] Authentification complète (register/login/logout)
- [ ] CRUD entraînements avec historique
- [ ] Journal alimentaire avec calculs nutritionnels
- [ ] Dashboard avec 2-3 graphiques minimum
- [ ] Interface responsive
- [ ] Base de données peuplée avec données de test

### Qualité technique :
- [ ] Code propre et commenté
- [ ] APIs documentées
- [ ] Gestion d'erreurs appropriée
- [ ] Sécurité de base (JWT, validation inputs)
- [ ] Tests manuels complets effectués

### Documentation :
- [ ] README avec instructions d'installation
- [ ] Documentation technique
- [ ] Rapport final selon gabarit
- [ ] Présentation préparée avec démo
